name: CD Pipeline

on:
  push:
    branches: [ master ]
  workflow_dispatch:  # Allow manual deployment

env:
  NODE_VERSION: '22'
  JAVA_VERSION: '21'
  DEPLOY_HOST: '192.168.0.122'
  DEPLOY_USER: 'pi'
  APP_NAME: 'scada-system'

jobs:
  # Pre-deployment tests (same as CI but as safety check)
  pre-deployment-tests:
    name: Pre-deployment Safety Tests
    runs-on: ubuntu-latest

    outputs:
      should-deploy: ${{ steps.check-tests.outputs.deploy }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Backend tests
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Run backend tests
        working-directory: ./scada-system
        run: |
          chmod +x ./mvnw
          ./mvnw clean test -B

      # Frontend tests
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Test frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run type-check
          npm run lint
          npm run build

      - name: Check if deployment should proceed
        id: check-tests
        run: echo "deploy=true" >> $GITHUB_OUTPUT

  # Build production artifacts
  build-artifacts:
    name: Build Production Artifacts
    runs-on: ubuntu-latest
    needs: pre-deployment-tests
    if: needs.pre-deployment-tests.outputs.should-deploy == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Build backend JAR
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Build backend JAR
        working-directory: ./scada-system
        run: |
          chmod +x ./mvnw
          ./mvnw clean package -DskipTests -B

      # Build frontend
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      # Upload artifacts
      - name: Upload backend JAR
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: scada-system/target/*.jar
          retention-days: 30

      - name: Upload frontend dist
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 30

  # Deploy to Raspberry Pi
  deploy:
    name: Deploy to Raspberry Pi
    runs-on: ubuntu-latest
    needs: [pre-deployment-tests, build-artifacts]
    if: needs.pre-deployment-tests.outputs.should-deploy == 'true'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend JAR
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: ./artifacts/backend/

      - name: Download frontend dist
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: ./artifacts/frontend/

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ env.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/deploy_key -o ConnectTimeout=10 ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "echo 'SSH connection successful'"

      - name: Create deployment directory
        run: |
          ssh -i ~/.ssh/deploy_key ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            sudo mkdir -p /opt/${{ env.APP_NAME }}/releases/$(date +%Y%m%d_%H%M%S)
            sudo chown -R ${{ env.DEPLOY_USER }}:${{ env.DEPLOY_USER }} /opt/${{ env.APP_NAME }}
          "

      - name: Upload deployment files
        run: |
          RELEASE_DIR="/opt/${{ env.APP_NAME }}/releases/$(date +%Y%m%d_%H%M%S)"

          # Upload artifacts
          scp -i ~/.ssh/deploy_key -r ./artifacts/* ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:$RELEASE_DIR/

          # Upload Docker configurations
          scp -i ~/.ssh/deploy_key ./docker-compose.prod.yml ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:$RELEASE_DIR/
          scp -i ~/.ssh/deploy_key -r ./deployment/ ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:$RELEASE_DIR/

          # Make scripts executable
          ssh -i ~/.ssh/deploy_key ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            chmod +x $RELEASE_DIR/deployment/scripts/*.sh
          "

      - name: Deploy application
        run: |
          RELEASE_DIR="/opt/${{ env.APP_NAME }}/releases/$(date +%Y%m%d_%H%M%S)"

          ssh -i ~/.ssh/deploy_key ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            cd $RELEASE_DIR
            ./deployment/scripts/deploy.sh
          "

      - name: Health check
        run: |
          ssh -i ~/.ssh/deploy_key ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            /opt/${{ env.APP_NAME }}/current/deployment/scripts/health-check.sh
          "

      - name: Rollback on failure
        if: failure()
        run: |
          ssh -i ~/.ssh/deploy_key ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            /opt/${{ env.APP_NAME }}/current/deployment/scripts/rollback.sh
          "

      - name: Cleanup old releases
        if: success()
        run: |
          ssh -i ~/.ssh/deploy_key ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            /opt/${{ env.APP_NAME }}/current/deployment/scripts/cleanup.sh
          "

      - name: Send deployment notification
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '✅ Success' : '❌ Failed';
            const commit = context.sha.substring(0, 7);
            const author = context.actor;

            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `## Deployment ${status}

              **Commit:** ${commit}
              **Author:** ${author}
              **Environment:** Production (Raspberry Pi)
              **Time:** ${new Date().toISOString()}

              View the [deployment logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.`
            });

  # Post-deployment verification
  post-deployment-verification:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: deploy
    if: success()

    steps:
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ env.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Verify services are running
        run: |
          ssh -i ~/.ssh/deploy_key ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            cd /opt/${{ env.APP_NAME }}/current
            docker-compose -f docker-compose.prod.yml ps

            # Check if all services are healthy
            ./deployment/scripts/verify-deployment.sh
          "

      - name: Run integration tests
        run: |
          ssh -i ~/.ssh/deploy_key ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            cd /opt/${{ env.APP_NAME }}/current
            ./deployment/scripts/integration-tests.sh
          "
        continue-on-error: true

      - name: Update deployment status
        run: |
          echo "Deployment completed successfully at $(date)"
          echo "Services verified and running on ${{ env.DEPLOY_HOST }}"